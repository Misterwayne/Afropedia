// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String   // Store hashed password!
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  revisions Revision[]
}

model Article {
  id               Int        @id @default(autoincrement())
  title            String     @unique // Normalized title (e.g., "Page_Name")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  revisions        Revision[] @relation("ArticleRevisions")
  currentRevision  Revision?  @relation("CurrentRevision", fields: [currentRevisionId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Avoid cycles on delete
  currentRevisionId Int?       @unique // Foreign key to the latest Revision
}

model Revision {
  id         Int      @id @default(autoincrement())
  content    String   // Markdown content
  comment    String?  // Edit summary
  timestamp  DateTime @default(now())
  tsvector_content Unsupported("tsvector")? // Fulltext search index

  article   Article @relation("ArticleRevisions", fields: [articleId], references: [id], onDelete: Cascade) // Delete revisions if article is deleted
  articleId Int

  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull) // Keep revision if user is deleted, set userId to null
  userId Int?

  isCurrentIn Article? @relation("CurrentRevision") // Relation back to Article if this is the current one
}